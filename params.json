{
  "name": "Tsp-using-simulated-annealing-c-",
  "tagline": "",
  "body": "This code solves the Travelling Salesman Problem using simulated annealing in C++.\r\nFor generating a new path , I swapped 2\r\ncities randomly and then reversed all the cities between them.\r\nI did a random restart of the code 20 times.\r\nAnnealing schedules tested :\r\n1) Starting temperature 9000000000, cooling rate : 0.1\r\nIn this case very few paths were searched , and i could not get the optimal\r\nvalue of the path of even 7 city problem.\r\n2) Starting temperature 999999999999999999, cooling rate : 0.5\r\nWith this I was able to solve upto 8 City problem optimally but nothing\r\nbeyond that.\r\n3)Starting temperature 99999999999999999999999999999999999999999.0, cooling rate : 0.9\r\nWith this configuration I was able to solve 10 City problem and upto 12 city\r\nalmost optimally.\r\nThe third schedule is the best among the rest as it has a slow cooling rate\r\nand higher temperature.\r\nI ran the 36 City Problem with 100 random restarts and configuration 3. The\r\nbest path cost that the algorithm found was 1233.\r\nThe plot below shows how the cost function changes during each random\r\nrestart.\r\n\r\n![](https://github.com/deerishi/tsp-using-simulated-annealing-c-/blob/master/sim.png?raw=True)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}